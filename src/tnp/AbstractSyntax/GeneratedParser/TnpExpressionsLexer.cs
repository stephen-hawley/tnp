//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TnpExpressions.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class TnpExpressionsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, BOOLEAN_LITERAL=29, STRING_LITERAL=30, 
		DECIMAL_LITERAL=31, HEX_LITERAL=32, FLOAT_LITERAL=33, IDENTIFIER=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "BOOLEAN_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEX_LITERAL", "FLOAT_LITERAL", "IDENTIFIER", "LetterOrDigit", "Letter", 
		"EscapeSequence", "HexDigit", "Digits", "ExponentPart"
	};


	public TnpExpressionsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TnpExpressionsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", 
		"'%'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&'", "'^'", "'|'", 
		"'&&'", "'||'", "'?'", "':'", "','", "'out'", "'ref'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "BOOLEAN_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEX_LITERAL", "FLOAT_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TnpExpressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TnpExpressionsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,294,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
		11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
		22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,
		27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,157,8,28,1,29,1,29,
		1,29,5,29,162,8,29,10,29,12,29,165,9,29,1,29,1,29,1,30,1,30,1,30,3,30,
		172,8,30,1,30,4,30,175,8,30,11,30,12,30,176,1,30,3,30,180,8,30,3,30,182,
		8,30,1,30,3,30,185,8,30,1,31,1,31,1,31,1,31,5,31,191,8,31,10,31,12,31,
		194,9,31,1,31,3,31,197,8,31,1,31,3,31,200,8,31,1,32,1,32,1,32,3,32,205,
		8,32,1,32,1,32,3,32,209,8,32,1,32,3,32,212,8,32,1,32,3,32,215,8,32,1,32,
		1,32,1,32,3,32,220,8,32,1,32,3,32,223,8,32,3,32,225,8,32,1,33,1,33,5,33,
		229,8,33,10,33,12,33,232,9,33,1,34,1,34,3,34,236,8,34,1,35,1,35,1,36,1,
		36,1,36,1,36,1,36,1,36,3,36,246,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		3,36,255,8,36,1,36,3,36,258,8,36,1,36,3,36,261,8,36,1,36,1,36,1,36,4,36,
		266,8,36,11,36,12,36,267,1,36,1,36,1,36,1,36,1,36,3,36,275,8,36,1,37,1,
		37,1,38,1,38,5,38,281,8,38,10,38,12,38,284,9,38,1,38,3,38,287,8,38,1,39,
		1,39,3,39,291,8,39,1,39,1,39,0,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
		65,33,67,34,69,0,71,0,73,0,75,0,77,0,79,0,1,0,15,4,0,10,10,13,13,34,34,
		92,92,1,0,49,57,2,0,76,76,108,108,2,0,88,88,120,120,3,0,48,57,65,70,97,
		102,4,0,48,57,65,70,95,95,97,102,4,0,68,68,70,70,100,100,102,102,1,0,48,
		57,3,0,65,90,95,95,97,122,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
		114,114,116,116,1,0,48,51,1,0,48,55,2,0,48,57,95,95,2,0,69,69,101,101,
		2,0,43,43,45,45,317,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,81,1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,
		0,7,87,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,
		17,97,1,0,0,0,19,99,1,0,0,0,21,101,1,0,0,0,23,103,1,0,0,0,25,105,1,0,0,
		0,27,107,1,0,0,0,29,110,1,0,0,0,31,113,1,0,0,0,33,116,1,0,0,0,35,119,1,
		0,0,0,37,121,1,0,0,0,39,123,1,0,0,0,41,125,1,0,0,0,43,128,1,0,0,0,45,131,
		1,0,0,0,47,133,1,0,0,0,49,135,1,0,0,0,51,137,1,0,0,0,53,141,1,0,0,0,55,
		145,1,0,0,0,57,156,1,0,0,0,59,158,1,0,0,0,61,181,1,0,0,0,63,186,1,0,0,
		0,65,224,1,0,0,0,67,226,1,0,0,0,69,235,1,0,0,0,71,237,1,0,0,0,73,274,1,
		0,0,0,75,276,1,0,0,0,77,278,1,0,0,0,79,288,1,0,0,0,81,82,5,91,0,0,82,2,
		1,0,0,0,83,84,5,93,0,0,84,4,1,0,0,0,85,86,5,40,0,0,86,6,1,0,0,0,87,88,
		5,41,0,0,88,8,1,0,0,0,89,90,5,43,0,0,90,10,1,0,0,0,91,92,5,45,0,0,92,12,
		1,0,0,0,93,94,5,126,0,0,94,14,1,0,0,0,95,96,5,33,0,0,96,16,1,0,0,0,97,
		98,5,42,0,0,98,18,1,0,0,0,99,100,5,47,0,0,100,20,1,0,0,0,101,102,5,37,
		0,0,102,22,1,0,0,0,103,104,5,60,0,0,104,24,1,0,0,0,105,106,5,62,0,0,106,
		26,1,0,0,0,107,108,5,60,0,0,108,109,5,61,0,0,109,28,1,0,0,0,110,111,5,
		62,0,0,111,112,5,61,0,0,112,30,1,0,0,0,113,114,5,61,0,0,114,115,5,61,0,
		0,115,32,1,0,0,0,116,117,5,33,0,0,117,118,5,61,0,0,118,34,1,0,0,0,119,
		120,5,38,0,0,120,36,1,0,0,0,121,122,5,94,0,0,122,38,1,0,0,0,123,124,5,
		124,0,0,124,40,1,0,0,0,125,126,5,38,0,0,126,127,5,38,0,0,127,42,1,0,0,
		0,128,129,5,124,0,0,129,130,5,124,0,0,130,44,1,0,0,0,131,132,5,63,0,0,
		132,46,1,0,0,0,133,134,5,58,0,0,134,48,1,0,0,0,135,136,5,44,0,0,136,50,
		1,0,0,0,137,138,5,111,0,0,138,139,5,117,0,0,139,140,5,116,0,0,140,52,1,
		0,0,0,141,142,5,114,0,0,142,143,5,101,0,0,143,144,5,102,0,0,144,54,1,0,
		0,0,145,146,5,46,0,0,146,56,1,0,0,0,147,148,5,116,0,0,148,149,5,114,0,
		0,149,150,5,117,0,0,150,157,5,101,0,0,151,152,5,102,0,0,152,153,5,97,0,
		0,153,154,5,108,0,0,154,155,5,115,0,0,155,157,5,101,0,0,156,147,1,0,0,
		0,156,151,1,0,0,0,157,58,1,0,0,0,158,163,5,34,0,0,159,162,8,0,0,0,160,
		162,3,73,36,0,161,159,1,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
		1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,34,0,
		0,167,60,1,0,0,0,168,182,5,48,0,0,169,179,7,1,0,0,170,172,3,77,38,0,171,
		170,1,0,0,0,171,172,1,0,0,0,172,180,1,0,0,0,173,175,5,95,0,0,174,173,1,
		0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,
		178,180,3,77,38,0,179,171,1,0,0,0,179,174,1,0,0,0,180,182,1,0,0,0,181,
		168,1,0,0,0,181,169,1,0,0,0,182,184,1,0,0,0,183,185,7,2,0,0,184,183,1,
		0,0,0,184,185,1,0,0,0,185,62,1,0,0,0,186,187,5,48,0,0,187,188,7,3,0,0,
		188,196,7,4,0,0,189,191,7,5,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,
		1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,197,7,4,0,
		0,196,192,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,7,2,0,0,199,
		198,1,0,0,0,199,200,1,0,0,0,200,64,1,0,0,0,201,202,3,77,38,0,202,204,5,
		46,0,0,203,205,3,77,38,0,204,203,1,0,0,0,204,205,1,0,0,0,205,209,1,0,0,
		0,206,207,5,46,0,0,207,209,3,77,38,0,208,201,1,0,0,0,208,206,1,0,0,0,209,
		211,1,0,0,0,210,212,3,79,39,0,211,210,1,0,0,0,211,212,1,0,0,0,212,214,
		1,0,0,0,213,215,7,6,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,225,1,0,0,
		0,216,222,3,77,38,0,217,219,3,79,39,0,218,220,7,6,0,0,219,218,1,0,0,0,
		219,220,1,0,0,0,220,223,1,0,0,0,221,223,7,6,0,0,222,217,1,0,0,0,222,221,
		1,0,0,0,223,225,1,0,0,0,224,208,1,0,0,0,224,216,1,0,0,0,225,66,1,0,0,0,
		226,230,3,71,35,0,227,229,3,69,34,0,228,227,1,0,0,0,229,232,1,0,0,0,230,
		228,1,0,0,0,230,231,1,0,0,0,231,68,1,0,0,0,232,230,1,0,0,0,233,236,3,71,
		35,0,234,236,7,7,0,0,235,233,1,0,0,0,235,234,1,0,0,0,236,70,1,0,0,0,237,
		238,7,8,0,0,238,72,1,0,0,0,239,245,5,92,0,0,240,241,5,117,0,0,241,242,
		5,48,0,0,242,243,5,48,0,0,243,244,5,53,0,0,244,246,5,99,0,0,245,240,1,
		0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,275,7,9,0,0,248,254,5,92,0,0,
		249,250,5,117,0,0,250,251,5,48,0,0,251,252,5,48,0,0,252,253,5,53,0,0,253,
		255,5,99,0,0,254,249,1,0,0,0,254,255,1,0,0,0,255,260,1,0,0,0,256,258,7,
		10,0,0,257,256,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,261,7,11,0,
		0,260,257,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,275,7,11,0,0,263,
		265,5,92,0,0,264,266,5,117,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,
		1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,3,75,37,0,270,271,3,75,
		37,0,271,272,3,75,37,0,272,273,3,75,37,0,273,275,1,0,0,0,274,239,1,0,0,
		0,274,248,1,0,0,0,274,263,1,0,0,0,275,74,1,0,0,0,276,277,7,4,0,0,277,76,
		1,0,0,0,278,286,7,7,0,0,279,281,7,12,0,0,280,279,1,0,0,0,281,284,1,0,0,
		0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,
		287,7,7,0,0,286,282,1,0,0,0,286,287,1,0,0,0,287,78,1,0,0,0,288,290,7,13,
		0,0,289,291,7,14,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,
		293,3,77,38,0,293,80,1,0,0,0,30,0,156,161,163,171,176,179,181,184,192,
		196,199,204,208,211,214,219,222,224,230,235,245,254,257,260,267,274,282,
		286,290,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
